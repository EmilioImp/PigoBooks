---
swagger: "2.0"
info:
  description: "This is a Bookstore server\n"
  version: "1.0.0"
  title: "MyBookstore"
host: "virtserver.swaggerhub.com"
basePath: "/xXEmilioXx/MyBookstore/1.0.0"
tags:
- name: "book"
  description: "Operations about books"
- name: "user"
  description: "Operations about users"
- name: "author"
  description: "Operations about authors"
- name: "event"
  description: "Operations about events"
schemes:
- "https"
- "http"
paths:
  /book/{bookID}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookID"
        in: "path"
        description: "ID of the book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"
  /book/findByGenre:
    get:
      tags:
      - "book"
      summary: "Finds books by genre"
      operationId: "findBooksByGenre"
      produces:
      - "application/json"
      parameters:
      - name: "genre"
        in: "query"
        description: "Genre value that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookEssential"
        400:
          description: "Invalid genre value"
        404:
          description: "No books with that genre"
      x-swagger-router-controller: "Book"
  /book/findByTheme:
    get:
      tags:
      - "book"
      summary: "Finds books by theme"
      operationId: "findBooksByTheme"
      produces:
      - "application/json"
      parameters:
      - name: "theme"
        in: "query"
        description: "Theme value that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookEssential"
        400:
          description: "Invalid theme value"
        404:
          description: "No books with that theme"
      x-swagger-router-controller: "Book"
  /book/findByName:
    get:
      tags:
      - "book"
      summary: "Finds books by name"
      operationId: "findBooksByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookEssential"
        400:
          description: "Invalid name value"
        404:
          description: "No books with that name"
      x-swagger-router-controller: "Book"
  /book/genres:
    get:
      tags:
      - "book"
      summary: "Get the genres"
      operationId: "getGenres"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              type: string
      x-swagger-router-controller: "Book"
  /book/themes:
    get:
      tags:
      - "book"
      summary: "Get the themes"
      operationId: "getThemes"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              type: string
      x-swagger-router-controller: "Book"
  /book/similarBooks/{bookID}:
    get:
      tags:
      - "book"
      summary: "Get similar books"
      operationId: "getSimilarBooks"
      produces:
      - "application/json"
      parameters:
      - name: "bookID"
        in: "path"
        description: "ID of the book which similar books must be returned"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BookEssential"
        404:
          description: "No similar books found"
      x-swagger-router-controller: "Book"
  /user:
    get:
      tags:
      - "user"
      summary: "Returns user data"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserWithoutPass"
        403:
          description: "Access denied"
      security:
      - json_web_token: []
      x-security-scopes:
      - "user"
      x-swagger-router-controller: "User"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Creates user"
      description: "Creates a new user profile"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that needs to register"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "User registered"
          schema:
            $ref: "#/definitions/UserWithID"
        400:
          description: "User already registered"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "The password for login"
        required: true
        type: "string"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Token"
        400:
          description: "Invalid username or password"
      x-swagger-router-controller: "User"
  /user/unregister:
    delete:
      tags:
      - "user"
      summary: "Deletes user"
      description: "A logged in user deletes his own account"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserWithID"
        403:
          description: "Access denied"
      security:
      - json_web_token: []
      x-security-scopes:
      - "user"
      x-swagger-router-controller: "User"
  /user/cart:
    get:
      tags:
      - "user"
      summary: "Gets the shopping cart of the user"
      operationId: "getUserCart"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: "Access denied"
      security:
      - json_web_token: []
      x-security-scopes:
      - "user"
      x-swagger-router-controller: "User"
  /user/cart/addBook:
    post:
      tags:
      - "user"
      summary: "Adds book to the user's cart"
      operationId: "addBookToCart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "bookID and number of copies to add to the cart"
        required: true
        schema:
          $ref: "#/definitions/AddToCartRequest"
      responses:
        201:
          description: "Book added"
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "Invalid input"
        403:
          description: "Access denied"
        404:
          description: "Book not found"
      security:
      - json_web_token: []
      x-security-scopes:
      - "user"
      x-swagger-router-controller: "User"
  /user/cart/deleteBook/{bookID}:
    delete:
      tags:
      - "user"
      summary: "Deletes book from the user's cart"
      operationId: "userCartDeleteBookBookIDDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "bookID"
        in: "path"
        description: "ID of the book to delete from the cart"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Book deleted from the cart"
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: "Access denied"
        404:
          description: "Book not found"
      security:
      - json_web_token: []
      x-security-scopes:
      - "user"
      x-swagger-router-controller: "User"
  /user/cart/buyBooks:
    post:
      tags:
      - "user"
      summary: "Buy books from user's cart"
      operationId: "userCartBuyBooksPOST"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: "Access denied"
      security:
      - json_web_token: []
      x-security-scopes:
      - "user"
      x-swagger-router-controller: "User"
  /author:
    get:
      tags:
      - "author"
      summary: "Returns all authors' essential data"
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AuthorEssential"
        404:
          description: "No author found"
      x-swagger-router-controller: "Author"
  /author/{authorID}:
    get:
      tags:
      - "author"
      summary: "Returns a single author by ID"
      operationId: "getAuthorByID"
      produces:
      - "application/json"
      parameters:
      - name: "authorID"
        in: "path"
        description: "ID of the author to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Author not found"
      x-swagger-router-controller: "Author"
  /event:
    get:
      tags:
      - "event"
      summary: "Returns all events' essential data"
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EventEssential"
        404:
          description: "No event found"
      x-swagger-router-controller: "Event"
  /event/{eventID}:
    get:
      tags:
      - "event"
      summary: "Returns a single event by ID"
      operationId: "getEventByID"
      produces:
      - "application/json"
      parameters:
      - name: "eventID"
        in: "path"
        description: "ID of the event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "invalid ID supplied"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
securityDefinitions:
  json_web_token:
    type: "apiKey"
    name: "json_web_token"
    in: "header"
definitions:
  Token:
    type: "object"
    properties:
      token:
        type: "string"
    example:
      token: "token"
  Book:
    type: "object"
    properties:
      genre:
        $ref: "#/definitions/Genre"
      themes:
        type: "array"
        items:
          $ref: "#/definitions/Theme"
      name:
        type: "string"
        example: "Il sentiero"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/AuthorEssential"
      edition:
        type: "integer"
        format: "int64"
      cost:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "book status in the store"
        enum:
        - "available"
        - "out_of_stock"
    example:
      themes:
      - name: "love"
      - name: "love"
      cost: 1
      genre:
        name: "historical novel"
      name: "Il sentiero"
      edition: 6
      authors:
      - firstName: "firstName"
        lastName: ""
        id: 0
      - firstName: "firstName"
        lastName: ""
        id: 0
      status: "available"
  BookWithID:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      genre:
        $ref: "#/definitions/Genre"
      themes:
        type: "array"
        items:
          $ref: "#/definitions/Theme"
      name:
        type: "string"
        example: "Il sentiero"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/AuthorEssential"
      edition:
        type: "integer"
        format: "int64"
      cost:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "book status in the store"
        enum:
        - "available"
        - "out_of_stock"
  BookEssential:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Il sentiero"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/AuthorEssential"
    example:
      name: "Il sentiero"
      id: 0
      authors:
      - firstName: "firstName"
        lastName: ""
        id: 0
      - firstName: "firstName"
        lastName: ""
        id: 0
  BookIDandName:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Il sentiero"
    example:
      name: "Il sentiero"
      id: 0
  Genre:
    type: "object"
    properties:
      name:
        type: "string"
        enum:
        - "historical novel"
        - "science fiction"
        - "fantasy novel"
        - "adventure novel"
        - "fiction novel"
        - "appendix novel"
        - "novel for kids"
        - "horror novel"
        - "thriller"
        - "crime story"
        - "romance"
        - "erotic novel"
        - "psychological novel"
        - "humorous novel"
        - "social novel"
        - "epistolary novel"
        - "tale"
        - "historiography"
        - "biography"
        - "informative narrative"
        - "poetry"
        - "theatre"
    example:
      name: "historical novel"
  Theme:
    type: "object"
    properties:
      name:
        type: "string"
        enum:
        - "love"
        - "war"
        - "nature"
        - "space"
        - "science"
        - "politics"
        - "economy"
        - "misoltini"
        - "society"
    example:
      name: "love"
  User:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      phone: "phone"
      email: "email"
      username: "username"
  UserWithoutPass:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      phone: "phone"
      email: "email"
      username: "username"
  UserWithID:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      booklist:
        type: "array"
        items:
          $ref: "#/definitions/BookEssential"
      total_price:
        type: "integer"
        format: "int64"
    example:
      booklist:
      - name: "Il sentiero"
        id: 0
        authors:
        - firstName: "firstName"
          lastName: ""
          id: 0
        - firstName: "firstName"
          lastName: ""
          id: 0
      - name: "Il sentiero"
        id: 0
        authors:
        - firstName: "firstName"
          lastName: ""
          id: 0
        - firstName: "firstName"
          lastName: ""
          id: 0
      total_price: 6
      id: 0
  AddToCartRequest:
    type: "object"
    properties:
      bookID:
        type: "integer"
        format: "int64"
      copies:
        type: "integer"
        format: "int64"
    example:
      copies: 6
      bookID: 0
  Author:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      writtenBooks:
        type: "array"
        items:
          $ref: "#/definitions/BookIDandName"
    example:
      firstName: "firstName"
      lastName: "lastName"
      writtenBooks:
      - name: "Il sentiero"
        id: 0
        authors:
        - firstName: "firstName"
          lastName: ""
          id: 0
        - firstName: "firstName"
          lastName: ""
          id: 0
      - name: "Il sentiero"
        id: 0
        authors:
        - firstName: "firstName"
          lastName: ""
          id: 0
        - firstName: "firstName"
          lastName: ""
          id: 0
  AuthorEssential:
    type: "object"
    properties:
      authorID:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        format: "string"
    example:
      firstName: "firstName"
      lastName: ""
      authorID: 0
  Event:
    type: "object"
    properties:
      name:
        type: "string"
      location:
        type: "string"
      time:
        type: "string"
      date:
        type: "string"
      image_path:
        type: "string"
      book:
        $ref: "#/definitions/BookIDandName"
  EventEssential:
    type: "object"
    properties:
      eventID:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      location:
        type: "string"
      time:
        type: "string"
      date:
        type: "string"
      image_path:
        type: "string"
      book:
        $ref: "#/definitions/BookIDandName"
