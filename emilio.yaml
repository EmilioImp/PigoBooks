swagger: '2.0'
info:
  description: |
    This is a Bookstore server
  version: 1.0.0
  title: MyBookstore
tags:
  - name: book
    description: Operations about books
  - name: user
    description: Operations about users
  - name: author
    description: Operations about authors
paths:
  /book:
    post:
      tags:
      - book
      summary: Add a new book to the store
      operationId: addBook
      security:
      - json_web_token: []
      x-security-scopes:
      - admin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Book that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        400:
          description: Invalid input
        201:
          description: Book added
          schema:
            $ref: '#/definitions/BookWithID'
  /book/{bookID}:
    get:
      tags:
      - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      produces:
      - application/json
      parameters:
      - in: path
        name: bookID
        description: ID of the book to return
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Book not found
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/BookWithID'
    put:
      tags:
      - book
      summary: Update data regarding an existing book
      operationId: updateBook
      security:
      - json_web_token: []
      x-security-scopes:
      - admin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: bookID
        description: The ID of the book to modify
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Data to be updated about the book
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Book not found
        200:
          description: Book updated
          schema:
            $ref: '#/definitions/BookWithID'
    delete:
      tags:
      - book
      summary: Deletes a book
      operationId: deleteBook
      security:
      - json_web_token: []
      x-security-scopes:
      - admin
      produces:
      - application/json
      parameters:
      - in: path
        name: bookID
        description: The ID of the book to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Book not found
        200:
          description: Sucessful operation
          schema:
            $ref: '#/definitions/BookWithID'
  /book/findByStatus:
    get:
      tags:
      - book
      summary: Finds Books by status
      operationId: findBooksByStatus
      produces:
      - application/json
      parameters:
      - in: query
        name: status
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - out_of_stock
          default: available
        collectionFormat: multi
      responses:
        400:
          description: Invalid status value
        404:
          description: No books with that status
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/BookWithID'
  /book/findByGenre:
    get:
      tags:
      - book
      summary: Finds books by genre
      operationId: findBooksByGenre
      produces:
      - application/json
      parameters:
      - in: query
        name: genre
        description: Genre values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - historical novel
          - science fiction
          - fantasy novel
          - adventure novel
          - fiction novel
          - appendix novel
          - novel for kids
          - horror novel
          - thriller
          - crime story
          - romance
          - erotic novel
          - psychological novel
          - humorous novel
          - social novel
          - epistolary novel
          - tale
          - historiography
          - biography
          - informative narrative
          - poetry
          - theatre
        collectionFormat: multi
      responses:
        400:
          description: Invalid genre value
        404:
          description: No books with that genre
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/BookWithID'
  /book/findByName:
    get:
      tags:
      - book
      summary: Finds books by name
      operationId: findBooksByName
      produces:
      - application/json
      parameters:
      - in: query
        name: name
        description: Name values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
      responses:
        400:
          description: Invalid name value
        404:
          description: No books with that name
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/BookWithID'
  /book/findByAuthor:
    get:
      tags:
      - book
      summary: Finds books by author
      operationId: findBooksByAuthor
      produces:
      - application/json
      parameters:
      - in: query
        name: author
        description: Author values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
      responses:
        400:
          description: Invalid author value
        404:
          description: No books with that author
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/BookWithID'
  /user:
    get:
      tags:
      - user
      summary: Returns user data
      operationId: getUser
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      produces:
      - application/json
      responses:
        403:
          description: Access denied
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
  /user/register:
    post:
      tags:
      - user
      summary: Creates user
      description: Creates a new user profile
      operationId: createUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: User that needs to register
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid input
        201:
          description: User registered
          schema:
            $ref: '#/definitions/UserWithID'
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
        - name: username
          in: formData
          description: The user name for login
          required: true
          type: string
        - name: password
          in: formData
          description: The password for login
          required: true
          type: string
      responses:
        400:
          description: Invalid username/password
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Token'
  /user/logout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      consumes:
      - application/json
      responses:
        403:
          description: Access denied
        201:
          description: Successful operation
  /user/unregister:
    delete:
      tags:
      - user
      summary: Deletes user
      description: A logged in user deletes his own account
      operationId: deleteUser
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      produces:
      - application/json
      responses:
        403:
          description: Access denied
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserWithID'
  /user/cart:
    get:
      tags:
      - user
      summary: Gets the shopping cart of the user
      operationId: getUserCart
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      produces:
      - application/json
      responses:
        403:
          description: Access denied
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Cart'
  /user/cart/addBook/{bookID}:
    post:
      tags:
      - user
      summary: Adds books to the user's cart
      operationId: addBooksToCart
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      produces:
      - application/json
      parameters:
      - in: path
        name: bookID
        description: ID of the book to add to the cart
        required: true
        type: integer
        format: int64
      responses:
        403:
          description: Access denied
        404:
          description: Book not found
        400:
          description: Invalid input
        201:
          description: Book added
          schema:
            $ref: '#/definitions/Cart'
  /user/cart/deleteBook/{bookID}:
    delete:
      tags:
      - user
      summary: Deletes book from the user's cart
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      produces:
      - application/json
      parameters:
      - in: path
        name: bookID
        description: ID of the book to delete from the cart
        required: true
        type: integer
        format: int64
      responses:
        403:
          description: Access denied
        404:
          description: Book not found
        200:
          description: Book deleted from the cart
          schema:
            $ref: '#/definitions/Cart'
  /user/cart/buyBooks:
    post:
      tags:
      - user
      summary: Buy books from user's cart
      security:
      - json_web_token: []
      x-security-scopes:
      - user
      produces:
      - application/json
      responses:
        403:
          description: Access denied
        201:
          description: Successful operation
          schema:
            $ref: '#/definitions/Cart'





  /author:
    get:
      tags:
      - author
      summary: Returns all authors' essential data
      operationId: getAuthors
      produces:
      - application/json
      responses:
        404:
          description: No author found
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#definitions/AuthorEssential'
  /author/{authorID}:
    get:
      tags:
      - author
      summary: Returns a single author by ID
      operationId: getAuthorByID
      produces:
      - application/json
      parameters:
      - in: path
        name: authorID
        description: ID of the author to return
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Author not found
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Author'


securityDefinitions:
  json_web_token:
    type: apiKey
    name: json_web_token
    in: header
definitions:
  Token:
    type: object
    properties:
      token:
        type: string
  Book:
    type: object
    properties:
      genre:
        $ref: '#/definitions/Genre'
      themes:
        type: array
        items:
          $ref: '#/definitions/Theme'
      name:
        type: string
        example: Il sentiero
      authors:
        type: array
        items:
          $ref: '#/definitions/AuthorEssential'
      edition:
        type: integer
        format: int64
      cost:
        type: integer
        format: int64
      status:
        type: string
        description: book status in the store
        enum:
          - available
          - out_of_stock
  BookWithID:
    type: object
    properties:
      id:
        type: integer
        format: int64
      genre:
        $ref: '#/definitions/Genre'
      themes:
        type: array
        items:
          $ref: '#/definitions/Theme'
      name:
        type: string
        example: Il sentiero
      authors:
        type: array
        items:
          $ref: '#/definitions/AuthorEssential'
      edition:
        type: integer
        format: int64
      cost:
        type: integer
        format: int64
      status:
        type: string
        description: book status in the store
        enum:
          - available
          - out_of_stock
  Genre:
    type: object
    properties:
      name:
        type: string
        enum:
              - historical novel
              - science fiction
              - fantasy novel
              - adventure novel
              - fiction novel
              - appendix novel
              - novel for kids
              - horror novel
              - thriller
              - crime story
              - romance
              - erotic novel
              - psychological novel
              - humorous novel
              - social novel
              - epistolary novel
              - tale
              - historiography
              - biography
              - informative narrative
              - poetry
              - theatre
  Theme:
    type: object
    properties:
      name:
        type: string
        enum:
              - love
              - war
              - nature
              - space
              - science
              - politics
              - economy
              - misoltini
              - society
  User:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
  UserWithID:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
  Cart:
    type: object
    properties:
      id:
        type: integer
        format: int64
      booklist:
        type: array
        items:
          $ref: '#/definitions/BookWithID'
      total_price:
        type: integer
        format: int64
  Author:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      writtenBooks:
        type: array
        items:
          $ref: '#/definitions/BookWithID'
  AuthorEssential:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        format: string

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /xXEmilioXx/MyBookstore/1.0.0
schemes:
 - https
 - http
